#include <random>
#include "test_main_cmdline.hpp"
#include "test_tree.hpp"
typedef test_tree tree_type;
typedef vector<tuple<size_t, tuple<size_t, size_t>>> output_type;
bool random_ = false;
size_t cap = 0;
size_t iteration = 0;
using namespace std;

static test_main_cmdline args; // Command line switches and arguments

void outputClusters(FILE *pFile, const vector<size_t> &clusters)
{
    for (size_t sig = 0; sig < clusters.size(); sig++)
    {
        fprintf(pFile, "%llu,%llu\n", static_cast<unsigned long long>(sig), static_cast<unsigned long long>(clusters[sig]));
    }
}

void outputClusters(FILE *pFile, const output_type &clusters)
{
    fprintf(pFile, "seqID,cluster,ancestor,level\n");
    for (size_t sig = 0; sig < clusters.size(); sig++)
    {
        fprintf(pFile, "%llu,%llu,%llu,%llu\n",
                static_cast<unsigned long long>(sig),
                static_cast<unsigned long long>(get<0>(clusters[sig])),
                static_cast<unsigned long long>(get<0>(get<1>(clusters[sig]))),
                static_cast<unsigned long long>(get<1>(get<1>(clusters[sig]))));
    }
}

void compressClusterList(vector<size_t> &clusters)
{
    unordered_map<size_t, size_t> remap;
    for (size_t &clus : clusters)
    {
        if (remap.count(clus))
        {
            clus = remap[clus];
        }
        else
        {
            size_t newClus = remap.size();
            remap[clus] = newClus;
            clus = newClus;
        }
    }
    fprintf(stderr, "Output %zu clusters\n", remap.size());
}

vector<size_t> clusterSignatures(const vector<data_type> &seqs)
{
    size_t seqCount = seqs.size();
    // seqCount = 300;
    vector<size_t> clusters(seqCount);
    tree_type tree(partree_capacity);

    size_t firstNodes = 1;
    if (firstNodes > seqCount)
        firstNodes = seqCount;

    vector<size_t> insertionList; // potential nodes idx except root; root is always 0

    default_random_engine rng;

    // node 0 reserved for root, node 1 reserved for leaves idx
    for (size_t i = firstNodes; i < partree_capacity; i++)
    {
        insertionList.push_back(partree_capacity - i);
    }

    vector<size_t> foo;
    for (int i = 0; i < cap; i++)
    {
        foo.push_back(i);
    }

    // vector<size_t> foo = {4, 7, 25, 20, 24, 16, 10, 9, 17, 8, 11, 5, 22, 23, 0, 2, 13, 21, 19, 1, 18, 3, 6, 15, 14, 12};

    if (random_)
    {
        unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
        shuffle(foo.begin(), foo.end(), std::default_random_engine(seed));
        for (size_t i : foo)
        {
            fprintf(stderr, "%zu,", i);
        }
        fprintf(stderr, "\n");

        // foo = {445, 626, 426, 339, 987, 260, 244, 2, 518, 851, 210, 377, 846, 326, 209, 765, 914, 842, 274, 784, 322, 603, 461, 324, 546, 897, 131, 689, 359, 825, 598, 928, 681, 155, 477, 731, 330, 468, 362, 918, 483, 786, 231, 799, 354, 338, 433, 228, 104, 526, 193, 898, 198, 941, 185, 656, 370, 173, 52, 192, 714, 583, 229, 122, 69, 565, 3, 261, 168, 440, 984, 310, 490, 124, 601, 205, 201, 492, 794, 742, 907, 259, 26, 329, 855, 564, 5, 540, 139, 369, 74, 417, 226, 624, 893, 956, 316, 379, 212, 621, 555, 174, 333, 8, 416, 166, 464, 748, 406, 476, 770, 4, 532, 277, 100, 836, 288, 965, 65, 224, 363, 341, 813, 980, 975, 95, 262, 388, 107, 42, 798, 444, 593, 853, 246, 872, 954, 98, 129, 367, 513, 981, 396, 774, 671, 916, 266, 404, 422, 719, 858, 499, 610, 178, 816, 407, 215, 866, 785, 949, 358, 420, 590, 830, 519, 90, 910, 337, 738, 807, 672, 371, 265, 22, 548, 636, 849, 320, 616, 995, 604, 467, 891, 909, 695, 494, 117, 865, 77, 536, 629, 309, 300, 72, 308, 47, 679, 469, 594, 607, 33, 449, 281, 641, 644, 311, 876, 211, 204, 757, 934, 62, 645, 151, 472, 701, 497, 680, 646, 713, 873, 754, 503, 822, 356, 387, 896, 704, 839, 84, 118, 187, 983, 296, 429, 182, 1, 575, 88, 561, 534, 655, 677, 399, 401, 285, 640, 40, 524, 233, 676, 525, 950, 920, 156, 740, 48, 351, 343, 130, 500, 793, 16, 153, 315, 600, 302, 368, 428, 170, 133, 144, 68, 856, 903, 620, 25, 272, 588, 35, 87, 19, 632, 164, 13, 372, 276, 913, 73, 556, 828, 475, 485, 268, 306, 106, 539, 434, 184, 446, 436, 264, 353, 105, 31, 23, 378, 43, 663, 668, 455, 180, 373, 576, 109, 687, 847, 737, 927, 569, 892, 278, 273, 904, 871, 336, 283, 145, 481, 225, 243, 240, 618, 86, 637, 432, 78, 6, 831, 602, 138, 158, 741, 197, 496, 463, 213, 567, 538, 874, 99, 160, 44, 208, 71, 661, 968, 474, 305, 238, 696, 457, 154, 376, 64, 861, 528, 545, 613, 971, 142, 263, 718, 307, 942, 375, 878, 923, 85, 427, 214, 597, 412, 848, 643, 508, 312, 392, 515, 148, 325, 678, 451, 286, 690, 293, 419, 489, 840, 18, 628, 505, 908, 275, 972, 739, 845, 788, 922, 884, 716, 758, 805, 479, 230, 992, 194, 921, 535, 236, 36, 29, 819, 709, 955, 12, 478, 755, 940, 773, 660, 673, 854, 186, 806, 466, 202, 247, 932, 889, 582, 585, 317, 702, 54, 425, 959, 522, 771, 400, 219, 966, 815, 149, 989, 49, 614, 89, 703, 863, 994, 549, 287, 349, 843, 512, 348, 79, 280, 562, 635, 943, 21, 171, 344, 653, 113, 108, 933, 431, 639, 75, 557, 900, 589, 579, 381, 699, 258, 592, 59, 123, 662, 510, 859, 803, 743, 776, 235, 952, 357, 887, 57, 24, 905, 552, 255, 775, 558, 297, 998, 332, 239, 894, 862, 707, 781, 413, 67, 506, 411, 912, 726, 596, 712, 960, 759, 438, 103, 559, 708, 698, 93, 256, 634, 0, 612, 284, 804, 222, 734, 834, 291, 334, 611, 323, 625, 150, 253, 744, 364, 820, 314, 53, 710, 541, 797, 791, 686, 749, 652, 790, 691, 128, 906, 735, 974, 495, 418, 11, 982, 764, 136, 408, 61, 217, 574, 507, 944, 669, 573, 415, 570, 17, 930, 462, 631, 97, 245, 543, 410, 877, 591, 501, 985, 787, 137, 879, 55, 821, 252, 450, 207, 37, 365, 642, 648, 937, 809, 127, 986, 27, 651, 958, 460, 41, 925, 511, 125, 162, 435, 993, 83, 389, 622, 516, 448, 126, 423, 199, 521, 453, 161, 442, 7, 152, 658, 685, 101, 761, 60, 684, 480, 465, 190, 502, 390, 191, 729, 953, 165, 938, 493, 391, 32, 789, 298, 91, 347, 650, 487, 531, 926, 792, 304, 143, 857, 833, 947, 697, 115, 520, 234, 346, 458, 720, 812, 327, 633, 935, 823, 957, 177, 665, 688, 924, 38, 946, 747, 753, 183, 28, 203, 176, 762, 888, 902, 179, 335, 705, 473, 580, 70, 294, 111, 102, 163, 527, 852, 249, 886, 751, 132, 402, 441, 94, 484, 772, 486, 895, 319, 250, 867, 745, 257, 452, 424, 996, 724, 195, 829, 844, 832, 488, 159, 581, 969, 911, 693, 397, 550, 248, 752, 482, 599, 551, 627, 837, 615, 659, 386, 566, 471, 782, 430, 350, 963, 523, 727, 824, 999, 514, 303, 667, 818, 529, 80, 66, 116, 919, 141, 134, 227, 808, 750, 15, 395, 978, 725, 571, 414, 498, 63, 778, 746, 366, 135, 756, 654, 976, 810, 114, 595, 530, 92, 779, 563, 46, 443, 345, 948, 242, 318, 664, 157, 221, 470, 189, 147, 270, 290, 795, 915, 961, 675, 393, 491, 374, 814, 76, 241, 119, 167, 768, 140, 899, 169, 706, 544, 723, 251, 666, 875, 50, 682, 355, 802, 841, 939, 352, 901, 56, 439, 767, 223, 289, 282, 801, 608, 405, 951, 292, 267, 254, 409, 694, 868, 271, 175, 730, 800, 619, 313, 216, 587, 39, 763, 96, 110, 850, 769, 991, 736, 760, 970, 715, 917, 120, 670, 692, 717, 811, 860, 509, 331, 82, 382, 945, 51, 454, 220, 605, 504, 780, 617, 890, 864, 869, 328, 361, 584, 826, 883, 10, 979, 700, 20, 360, 14, 657, 732, 537, 232, 973, 269, 964, 342, 58, 112, 181, 733, 990, 783, 647, 578, 9, 517, 683, 962, 146, 623, 172, 459, 609, 384, 796, 295, 880, 766, 218, 188, 777, 827, 560, 936, 340, 394, 606, 301, 649, 835, 81, 45, 572, 882, 721, 977, 638, 200, 447, 817, 398, 237, 456, 30, 728, 967, 437, 885, 542, 577, 533, 206, 553, 421, 674, 586, 121, 383, 997, 547, 722, 380, 321, 299, 568, 403, 881, 711, 34, 929, 870, 630, 385, 988, 279, 196, 554, 838, 931};

        // foo = {777,857,177,711,315,632,297,64,547,824,924,843,909,302,517,327,351,464,471,407,757,253,405,986,893,252,604,161,102,505,598,774,66,215,929,625,593,704,754,167,343,504,722,412,296,631,121,826,78,617,980,440,304,179,335,819,907,742,545,890,958,3,319,149,133,183,976,337,560,69,42,139,173,901,591,616,77,561,381,978,137,310,275,822,866,70,802,531,72,682,261,334,401,263,103,863,552,86,933,842,700,54,669,184,192,191,409,135,707,860,587,160,496,499,28,362,329,308,251,365,357,807,247,465,710,101,152,479,376,235,460,112,569,692,393,923,483,340,872,656,309,728,331,193,959,574,37,745,668,197,259,352,73,404,347,13,358,370,88,400,731,712,395,36,610,301,402,790,435,686,355,939,998,285,226,590,706,287,536,943,108,640,418,449,48,142,469,652,917,388,265,750,119,621,172,645,477,240,423,732,186,602,232,854,793,228,918,359,330,635,416,363,993,538,200,781,224,442,808,307,953,109,169,932,782,605,262,949,979,0,58,948,825,196,527,935,291,972,881,486,683,867,399,684,888,719,839,791,468,210,558,519,266,132,654,439,851,671,378,786,834,856,555,63,163,708,280,419,250,679,755,911,462,688,493,487,31,841,94,403,427,450,387,900,481,816,780,190,290,458,743,211,649,467,114,20,125,264,433,577,181,914,578,294,787,549,736,208,445,59,973,209,944,626,217,117,22,32,273,767,29,830,630,156,835,71,779,157,534,877,945,55,612,989,556,551,920,971,513,24,83,38,138,926,349,984,906,815,609,954,212,606,886,847,887,49,255,868,611,245,375,608,735,434,85,798,348,80,582,516,751,738,568,205,239,812,463,410,586,730,500,236,624,776,23,520,188,799,637,21,565,642,507,87,553,389,341,201,783,146,2,62,699,473,981,800,763,968,832,713,511,414,965,512,934,122,116,543,258,332,579,805,134,941,246,44,120,653,508,233,869,279,603,339,836,544,148,896,904,698,619,397,19,541,764,472,485,634,758,451,206,443,234,314,67,428,922,650,489,813,424,542,34,272,749,716,563,369,219,131,510,916,628,845,213,810,417,51,659,846,39,655,806,202,41,964,974,377,940,638,454,127,350,837,267,599,583,864,829,550,809,658,539,249,955,436,159,674,715,691,76,89,748,827,997,687,260,151,383,60,106,380,657,878,322,651,336,903,105,618,372,475,573,346,446,185,667,277,797,514,622,643,600,661,594,81,129,633,784,164,147,766,214,371,453,79,136,110,98,985,905,873,950,874,882,93,821,853,268,174,796,803,515,522,421,680,811,636,488,804,47,231,501,557,494,52,957,947,831,155,56,726,166,257,589,195,130,739,756,396,852,858,982,221,554,503,175,128,689,576,491,970,384,170,820,963,379,4,289,238,353,912,977,913,662,408,765,46,537,15,540,425,670,588,495,572,898,861,850,737,394,615,672,306,928,666,529,641,833,761,999,8,566,204,326,770,398,75,902,723,823,849,894,885,530,695,524,162,899,441,466,168,293,53,97,995,768,773,762,994,769,300,476,391,752,229,222,660,884,237,862,33,470,298,361,760,373,794,45,227,220,859,915,744,18,575,891,567,292,30,100,367,991,11,333,158,368,714,90,946,639,506,844,919,930,456,171,646,562,241,360,218,581,321,942,35,875,299,614,406,952,386,338,701,801,382,564,685,295,759,281,57,354,457,927,270,696,366,996,595,969,392,459,311,775,282,437,17,342,892,725,248,9,676,426,243,271,702,910,118,818,286,727,814,502,126,548,312,284,724,855,570,571,675,43,283,532,199,778,225,68,936,324,694,962,104,623,303,344,690,718,356,546,753,16,145,461,153,140,6,74,444,7,509,429,154,644,498,521,14,931,987,871,65,26,772,25,956,627,992,620,95,345,165,198,180,951,525,897,817,40,318,320,364,492,420,448,729,187,115,733,455,746,478,203,390,484,717,665,960,99,720,497,703,411,84,983,216,879,415,741,143,244,789,937,474,328,230,92,681,278,207,747,840,966,990,176,883,607,431,374,788,663,721,697,876,317,82,242,678,50,848,1,447,592,967,178,785,648,559,323,961,673,452,693,256,438,705,523,925,988,276,223,771,123,597,288,480,124,111,150,613,325,795,865,938,921,734,144,880,535,482,141,61,889,107,189,194,792,5,528,96,274,647,305,975,526,91,113,182,828,596,490,709,10,432,430,533,313,601,385,585,580,269,895,12,870,316,740,629,27,664,413,908,254,518,677,838,422,584};

        // vector<size_t> temp{};
        // foo = temp;
    }

    // for (size_t i = 0; i < cap; i++)
    // {
    //     for (size_t j = 0; j < cap; j++)
    //     {
    //         fprintf(stderr,"%zu,%zu,%.2f\n",i,j,calcDistance(seqs[foo[i]], seqs[foo[j]]));
    //     }
    // }

    for (size_t i = 0; i < cap; i++)
    {
        // fprintf(stderr, "inserting %zu\n", foo[i]);
        size_t clus = tree.insert(seqs[foo[i]], insertionList, foo[i]);
        // clusters[foo[i]] = tree.findAncestor(clus);
        clusters[foo[i]] = clus;
    }
    // for (size_t i = 0; i < cap; i++)
    // {
    //     clusters[foo[i]] = tree.superCluster(clusters[foo[i]]);
    // }
    fprintf(stderr, "\n\n\n\n");

    // size_t n = 102;
    // double threshold = 1.5;
    // tree.forceSplit(n, insertionList, threshold);

    // for (size_t child : tree.childLinks[n])
    // {
    //     if (tree.isBranchNode[child] && tree.priority[child] > threshold)
    //     {
    //         tree.forceSplit(child, insertionList, threshold);
    //     }
    // }
    FILE *pFile;
    if (random_)
    {
        pFile = fopen("tree-test-r.csv", "w");
    }
    else
    {
        pFile = fopen("tree-test.csv", "w");
    }
    fprintf(pFile, "node,parent,isBranch,priority,x,y\n");
    tree.printSubTreeMatrices(pFile, seqs, 0);

    // size_t best = tree.findNearest(seqs[15], 19, 0);
    // fprintf(stderr,"***%zu\n",best);

    fprintf(stderr, "%f, %f \n", tree.means[48].first, tree.means[48].second);

    for (size_t run = 0; run < iteration; run++)
    {
        tree.printTreeJson(stdout);
        fprintf(stderr, "Iteration %zu\n", run);
        tree.prepReinsert(tree.root);
        for (size_t i = 0; i < cap; i++)
        {
            size_t clus = tree.reinsert(seqs[foo[i]], foo[i]);

            fprintf(stderr, "\n found %zu at %zu\n", foo[i], clus);
            // clusters[foo[i]] = tree.findAncestor(clus);
            clusters[foo[i]] = clus;
        }
    }

    // tree.mergeChildren(tree.root, insertionList);

    // if (iteration == 0)
    // {
    //     tree.printTreeJson(stdout);
    //     tree.clearSeqId(insertionList[0]);

    //     for (size_t i = 0; i < cap; i++)
    //     {
    //         size_t clus = tree.search(seqs[foo[i]], foo[i]);
    //         tree.seqIDs[clus].push_back(foo[i]);

    //         fprintf(stderr, "\n found %zu at %zu\n", foo[i], clus);
    //         // clusters[foo[i]] = tree.findAncestor(clus);
    //         clusters[foo[i]] = clus;
    //     }
    // }

    // Recursively destroy all locks
    tree.destroyLocks();

    tree.printTreeJson(stdout);

    return clusters;
}

vector<pair<float, float>> generateCentroids(size_t count, size_t factor = 1, float mean = 0, float std = 1)
{
    vector<pair<float, float>> centroids;
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::default_random_engine generator(seed);

    std::normal_distribution<double> distribution(0.0, std);

    for (int i = 0; i < count; ++i)
    {
        centroids.push_back(make_pair(distribution(generator) * factor, distribution(generator) * factor));
    }

    // for (int i = 0; i < count; ++i)
    // {
    //     std::cout << centroids[i].first <<","<< centroids[i].second << std::endl;
    // }
    return centroids;
}

vector<float> rNorm(size_t count, float mean = 0, float std = 1)
{
    vector<float> output;
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::default_random_engine generator(seed);

    std::normal_distribution<double> distribution(mean, std);

    for (int i = 0; i < count; ++i)
    {
        output.push_back(distribution(generator));
    }

    return output;
}

vector<data_type> writeData(FILE *pFile, size_t clusCount, size_t clusSize)
{
    vector<pair<float, float>> data;

    fprintf(pFile, "%zu\n", clusCount);
    vector<pair<float, float>> centroids = generateCentroids(clusCount, 5);

    vector<float> x;
    vector<float> y;

    for (int i = 0; i < clusCount; ++i)
    {
        fprintf(pFile, "%f,%f\n", centroids[i].first, centroids[i].second);
    }

    for (int i = 0; i < clusCount; ++i)
    {
        x = rNorm(clusSize, centroids[i].first);
        y = rNorm(clusSize, centroids[i].second);

        for (int i = 0; i < clusSize; ++i)
        {
            fprintf(pFile, "%f,%f\n", x[i], y[i]);
            data.push_back(make_pair(x[i], y[i]));
        }
    }

    return data;
}

// read data, the first line is the number of clusters, the next few lines are the cluster centroids
vector<data_type> readData(const char *path)
{
    vector<data_type> data;
    FILE *fp = fopen(path, "r");
    if (!fp)
    {
        fprintf(stderr, "Failed to load %s\n", path);
        exit(1);
    }

    fprintf(stderr, "reading %s\n", path);
    size_t clusCount;
    fscanf(fp, "%zu", &clusCount); // check how many clusters

    for (size_t i = 0; i < clusCount; i++)
    {
        char fileBuf[100];
        fscanf(fp, "%s", fileBuf); // skip centroids
    }

    size_t i = 0;
    for (;;)
    {
        float x;
        float y;
        if (fscanf(fp, "%f,%f\n", &x, &y) < 1)
            break;

        data.push_back(make_pair(x, y));
        i++;
    }
    return data;
}

int test_main(int argc, char *argv[])
{
    split_threshold = 5;
    stay_threshold = 1;
    minimiser_match_threshold = 4;
    partree_capacity = 10000;

    args.parse(argc, argv);
    std::ios::sync_with_stdio(false); // No sync with stdio -> faster

    if (args.random_arg)
    {
        random_ = true;
    }

    if (args.split_threshold_given)
    {
        split_threshold = args.split_threshold_arg;
    }

    if (args.stay_threshold_given)
    {
        stay_threshold = args.stay_threshold_arg;
    }
    // split_node_threshold = split_threshold / 2;
    split_node_threshold = stay_threshold + 2;

    fprintf(stderr, "split threshold: %.2f\n", split_threshold);
    fprintf(stderr, "stay threshold: %.2f\n", stay_threshold);
    fprintf(stderr, "split_node_threshold threshold: %.2f\n", split_node_threshold);

    if (args.minimiser_match_given)
    {
        minimiser_match_threshold = args.minimiser_match_arg;
        fprintf(stderr, "minimiser_match threshold: %zu\n", minimiser_match_threshold);
    }

    iteration = args.iteration_arg;

    vector<data_type> seqs;
    if (args.input_given)
    {
        seqs = readData(args.input_arg);
        fprintf(stderr, "Loaded %zu signatures...\n", seqs.size());
    }
    else
    {
        FILE *pFile = fopen("data.txt", "w");
        seqs = writeData(pFile, 10, 100);
        fprintf(stderr, "Created %zu signatures...\n", seqs.size());
    }

    if (args.capacity_given)
    {
        cap = args.capacity_arg;
    }
    else
    {
        cap = seqs.size();
    }

    vector<size_t> clusters = clusterSignatures(seqs);

    // compressClusterList(clusters);

    FILE *pFile;
    if (random_)
    {
        pFile = fopen("output-r.txt", "w");
    }
    else
    {
        pFile = fopen("output.txt", "w");
    }
    outputClusters(pFile, clusters);

    return 0;
}
